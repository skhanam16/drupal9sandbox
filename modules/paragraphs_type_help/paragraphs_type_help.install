<?php

/**
 * @file
 * Install for the Paragraphs Type Help module.
 */

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Serialization\Yaml;

/**
 * Add a field to the entity type.
 */
function paragraphs_type_help_add_field_config($field_name) {
  $entity_type_id = 'paragraphs_type_help';
  $entity_bundle = 'paragraphs_type_help';
  $config_path = drupal_get_path('module', 'paragraphs_type_help') . '/config/install';
  $storage_config_file = $config_path . "/field.storage.{$entity_type_id}.{$field_name}.yml";
  $field_config_file = $config_path . "/field.field.{$entity_type_id}.{$entity_bundle}.{$field_name}.yml";

  $field_storage = FieldStorageConfig::loadByName($entity_type_id, $field_name);
  if (empty($field_storage)) {
    if (is_readable($storage_config_file)) {
      $storage_yml = file_get_contents($storage_config_file);
      if ($storage_yml) {
        $storage_data = Yaml::decode($storage_yml);
        $field_storage = FieldStorageConfig::create($storage_data);
        $field_storage->save();
      }
    }

    if (empty($field_storage)) {
      return;
    }
  }

  $field = FieldConfig::loadByName($entity_type_id, $entity_bundle, $field_name);
  if (empty($field)) {
    if (is_readable($field_config_file)) {
      $field_yml = file_get_contents($field_config_file);
      if ($field_yml) {
        $field_data = Yaml::decode($field_yml);
        $field = FieldStorageConfig::create($field_data);
        $field->save();
      }
    }

    if (empty($field)) {
      return;
    }
  }

  return $field;
}

/**
 * Add the help text field.
 */
function paragraphs_type_help_add_help_text_field() {
  $field_name = 'help_text';
  $field = paragraphs_type_help_add_field_config($field_name);
  if (!empty($field)) {
    // Assign widget settings for the 'default' form mode.
    $form_display = \Drupal::service('entity_display.repository')
      ->getFormDisplay('paragraphs_type_help', 'paragraphs_type_help', 'default');
    if ($form_display) {
      $form_display->setComponent($field_name, [
        'type' => 'text_textarea',
      ]);
      $form_display->save();
    }

    // Assign display settings for the 'default'.
    $view_display = \Drupal::service('entity_display.repository')
      ->getViewDisplay('paragraphs_type_help', 'paragraphs_type_help', 'default');
    if ($view_display) {
      $view_display->setComponent($field_name, [
        'label' => 'hidden',
        'type' => 'text_default',
      ]);
      $view_display->save();
    }

    // The admin_list view mode.
    $view_modes = \Drupal::service('entity_display.repository')->getViewModes('paragraphs_type_help');
    if (isset($view_modes['admin_list'])) {
      $admin_view_display = \Drupal::service('entity_display.repository')
        ->getViewDisplay('paragraphs_type_help', 'paragraphs_type_help', 'admin_list');
      if ($admin_view_display) {
        $admin_view_display->setComponent($field_name, [
          'label' => 'hidden',
          'type' => 'text_default',
        ]);

        $admin_view_display->save();
      }
    }
  }

  return $field;
}

/**
 * Add the help image field.
 */
function paragraphs_type_help_add_help_image_field() {
  $field_name = 'help_image';
  $field = paragraphs_type_help_add_field_config($field_name);

  if (!empty($field)) {
    // Assign widget settings for the 'default' form mode.
    $form_display = \Drupal::service('entity_display.repository')
      ->getFormDisplay('paragraphs_type_help', 'paragraphs_type_help', 'default');
    if ($form_display) {
      $form_display->setComponent($field_name, [
        'type' => 'image_image',
      ]);
      $form_display->save();
    }

    // Assign display settings for the 'default'.
    $view_display = \Drupal::service('entity_display.repository')
      ->getViewDisplay('paragraphs_type_help', 'paragraphs_type_help', 'default');
    if ($view_display) {
      $view_display->setComponent($field_name, [
        'label' => 'hidden',
        'type' => 'image',
        'settings' => [
          'image_style' => 'medium',
          'image_link' => '',
        ],
      ]);
      $view_display->save();
    }

    // The admin_list view mode.
    $view_modes = \Drupal::service('entity_display.repository')->getViewModes('paragraphs_type_help');
    if (isset($view_modes['admin_list'])) {
      $admin_view_display = \Drupal::service('entity_display.repository')
        ->getViewDisplay('paragraphs_type_help', 'paragraphs_type_help', 'admin_list');
      if ($admin_view_display) {
        $admin_view_display->setComponent($field_name, [
          'label' => 'hidden',
          'type' => 'image',
          'settings' => [
            'image_style' => 'medium',
            'image_link' => '',
          ],
        ]);

        $admin_view_display->save();
      }
    }
  }

  return $field;
}

/**
 * Update help text of base fields for form mode and view mode.
 */
function paragraphs_type_help_update_8101() {
  $entity_type = \Drupal::service('entity_type.manager')->getDefinition('paragraphs_type_help');
  if ($entity_type) {
    \Drupal::service('entity.definition_update_manager')->updateEntityType($entity_type);
  }
}

/**
 * Set auto-generated labels.
 */
function paragraphs_type_help_update_8102() {
  $storage = \Drupal::entityTypeManager()->getStorage('paragraphs_type_help');
  $results = $storage->getQuery('paragraphs_type_help')
    ->notExists('label')
    ->execute();
  if ($results) {
    $ids = array_keys($results);
    foreach ($storage->loadMultiple($ids) as $help) {
      if ($default_label = $help->defaultLabel()) {
        $help->setLabel($default_label)->save();
      }
    }
  }
}

/**
 * Convert help text and image base fields to regular field ui fields.
 */
function paragraphs_type_help_update_8103() {
  // Ensure fields are added.
  paragraphs_type_help_add_help_text_field();
  paragraphs_type_help_add_help_image_field();

  // Convert values.
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_type_id = 'paragraphs_type_help';

  $storage = $entity_type_manager->getStorage($entity_type_id);
  $entity_type_definition = $entity_type_manager->getDefinition($entity_type_id);
  $id_key = $entity_type_definition->getKey('id');
  $langcode_key = $entity_type_definition->getKey('langcode');

  // If there is no data table defined then use the base table.
  $table_name = $storage->getDataTable() ?: $storage->getBaseTable();
  $database = \Drupal::database();

  $text_base_fields = [];
  if ($database->schema()->fieldExists($table_name, 'help_text__value')) {
    $text_base_fields = [
      'value' => 'help_text__value',
      'format' => 'help_text__format',
    ];
  }
  $image_base_fields = [];
  if ($database->schema()->fieldExists($table_name, 'help_image__target_id')) {
    $image_base_fields = [
      'target_id' => 'help_image__target_id',
      'alt' => 'help_image__alt',
      'title' => 'help_image__title',
      'width' => 'help_image__width',
      'height' => 'help_image__height',
    ];
  }

  // Exit if base fields do not exist.
  if (empty($text_base_fields) && empty($image_base_fields)) {
    return t('Nothing to do. The base fields were converted already.');
  }

  // Build query.
  $select_fields = array_merge([$id_key, $langcode_key], array_values($text_base_fields), array_values($image_base_fields));
  $results = $database->select($table_name)
    ->fields($table_name, $select_fields)
    ->execute()
    ->fetchAll();

  // Migrate field values.
  foreach ($results as $result) {
    $needs_saved = FALSE;
    $entity = $storage->load($result->{$id_key});
    if (isset($result->{$langcode_key}) && $entity->hasTranslation($result->{$langcode_key})) {
      $entity = $entity->getTranslation($result->{$langcode_key});
    }

    // Help Text.
    if ($entity->hasField('help_text')) {
      $text_values = [];
      foreach ($text_base_fields as $prop => $text_base_field) {
        if (isset($result->{$text_base_field})) {
          $text_values[$prop] = $result->{$text_base_field};
        }
      }
      if ($text_values) {
        $text_values += ['format' => 'rich_text'];
        $entity->help_text = $text_values;
        $needs_saved = TRUE;
      }
    }

    // Help image.
    if ($entity->hasField('help_image')) {
      $image_values = [];
      foreach ($image_base_fields as $prop => $image_base_field) {
        if (isset($result->{$image_base_field})) {
          $image_values[$prop] = $result->{$image_base_field};
        }
      }
      if ($image_values) {
        $entity->help_image->setValue([$image_values]);
        $needs_saved = TRUE;
      }
    }

    // Save entity.
    if ($needs_saved) {
      $entity->save();
    }
  }

  // Drop base fields.
  foreach ($text_base_fields as $text_base_field) {
    $database->schema()->dropField($table_name, $text_base_field);
  }

  foreach ($image_base_fields as $image_base_field) {
    $database->schema()->dropField($table_name, $image_base_field);
  }

  // Update definitions.
  $entity_type = \Drupal::service('entity_type.manager')->getDefinition($entity_type_id);
  if ($entity_type) {
    \Drupal::service('entity.definition_update_manager')->updateEntityType($entity_type);
  }
}

/**
 * Set access permission on admin view.
 */
function paragraphs_type_help_update_8104() {
  $view_storage = \Drupal::entityTypeManager()->getStorage('view');
  if ($view_storage && ($view = $view_storage->load('paragraphs_type_help_admin'))) {
    $displays = $view->get('display');
    if (!empty($displays)) {
      $needs_saved = FALSE;
      foreach ($displays as &$display) {
        if (isset($display['display_options']['access']['type']) && $display['display_options']['access']['type'] == 'none') {
          $needs_saved = TRUE;
          $display['display_options']['access'] = [
            'type' => 'perm',
            'options' => [
              'perm' => 'manage paragraphs_type_help entity',
            ],
          ];
        }
      }
      if ($needs_saved) {
        $view->set('display', $displays);
        $view->save();
      }
    }
  }
}
