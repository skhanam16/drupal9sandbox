<?php

/**
 * @file
 * Provides hook integration for the Paragraphs Type Help module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\Display\EntityDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Render\Element;
use Drupal\paragraphs\Entity\ParagraphsType;
use Drupal\paragraphs_type_help\Entity\ParagraphsTypeHelp;

/**
 * Implements hook_theme().
 */
function paragraphs_type_help_theme() {
  return [
    'paragraphs_type_help' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function paragraphs_type_help_theme_suggestions_paragraphs_type_help(array $variables) {
  $suggestions = [];
  $help = $variables['elements']['#paragraphs_type_help'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  // View mode of the paragraphs type help entity.
  $suggestions[] = 'paragraphs_type_help__' . $sanitized_view_mode;

  // Paragraphs type based template suggestions.
  if ($paragraph_bundle = $help->getHostBundleId()) {
    $suggestions[] = 'paragraphs_type_help__' . $paragraph_bundle;

    // Form mode of the paragraphs type.
    if (!empty($variables['elements']['#paragraph_form_mode'])) {
      $sanitized_paragraph_form_mode = strtr($variables['elements']['#paragraph_form_mode'], '.', '_');
      $suggestions[] = 'paragraphs_type_help__' . $paragraph_bundle . '__form__' . $sanitized_paragraph_form_mode;
    }

    // View mode of the paragraphs type.
    if (!empty($variables['elements']['#paragraph_view_mode'])) {
      $sanitized_paragraph_view_mode = strtr($variables['elements']['#paragraph_view_mode'], '.', '_');
      $suggestions[] = 'paragraphs_type_help__' . $paragraph_bundle . '__view__' . $sanitized_paragraph_view_mode;
    }
  }

  // Paragraphs type help ID suggestions.
  $suggestions[] = 'paragraphs_type_help__' . $help->id();
  $suggestions[] = 'paragraphs_type_help__' . $help->id() . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Prepares variables for paragraphs-type-help templates.
 *
 * Default template: paragraphs-type-help.html.twig.
 */
function template_preprocess_paragraphs_type_help(&$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  $variables['paragraphs_type_help'] = $variables['elements']['#paragraphs_type_help'];
  $variables['paragraph_bundle'] = $variables['paragraphs_type_help']->getHostBundleId() ?: '';
  $variables['paragraph_form_mode'] = !empty($variables['elements']['#paragraph_form_mode']) ? $variables['elements']['#paragraph_form_mode'] : '';
  $variables['paragraph_view_mode'] = !empty($variables['elements']['#paragraph_view_mode']) ? $variables['elements']['#paragraph_view_mode'] : '';

  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  $variables['#attached']['library'][] = 'paragraphs_type_help/host_edit_form';
}

/**
 * Determine help view modes available for extra fields.
 *
 * @return array
 *   An array of view modes as returned by
 *   \Drupal\core\Entity\EntityDisplayRepositoryInterface::getViewModeOptions().
 */
function paragraphs_type_help_get_entity_extra_field_view_mode_options() {
  $view_modes = \Drupal::service('entity_display.repository')->getViewModeOptions('paragraphs_type_help');

  // Remove admin view modes.
  unset($view_modes['admin_list']);

  return $view_modes;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function paragraphs_type_help_entity_extra_field_info() {
  $extra = [];
  $host_entity_type = 'paragraph';

  // Get all paragraph bundles.
  $host_bundles = ParagraphsType::loadMultiple();
  if (!empty($host_bundles)) {
    // Build view mode names.
    $help_view_modes = paragraphs_type_help_get_entity_extra_field_view_mode_options();

    // Remove admin view modes.
    unset($help_view_modes['admin_list']);

    // Add host form and view modes for each help view mode.
    foreach ($host_bundles as $bundle_name => $bundle) {
      foreach ($help_view_modes as $help_view_mode_id => $help_view_mode_label) {
        $extra_field_name = "paragraphs_type_help__{$help_view_mode_id}";
        $extra_field_label = t('Paragraphs Type Help: Rendered as @view_mode', [
          '@view_mode' => $help_view_mode_label,
        ]);
        $extra_field_description = t('Renders all of the Paragraphs Type Help related to this paragaph type with view mode @view_mode.', [
          '@view_mode' => $help_view_mode_label,
        ]);

        $extra[$host_entity_type][$bundle_name]['form'][$extra_field_name] = [
          'label' => $extra_field_label,
          'description' => $extra_field_description,
          'weight' => -100,
          'visible' => $help_view_mode_id === 'default',
        ];

        $extra[$host_entity_type][$bundle_name]['display'][$extra_field_name] = [
          'label' => $extra_field_label,
          'description' => $extra_field_description,
          'weight' => -100,
          'visible' => FALSE,
        ];
      }
    }
  }

  return $extra;
}

/**
 * Build all help entities related to a paragraph.
 *
 * @param \Drupal\Core\Entity\Display\EntityDisplayInterface $display
 *   The host entity display.
 *
 * @return array
 *   An array keyed by the extra field name with the values of all the
 *   paragraphs_type_help entity builds for the host entity.
 */
function paragraphs_type_help_build_by_host_bundle(EntityDisplayInterface $display) {
  $help_view_modes = paragraphs_type_help_get_entity_extra_field_view_mode_options();

  // Exit if no help view modes.
  if (empty($help_view_modes)) {
    return [];
  }

  // Determine enabled fields.
  $extra_fields_enabled = [];
  foreach ($help_view_modes as $help_view_mode_id => $help_view_mode_label) {
    $extra_field_name = "paragraphs_type_help__{$help_view_mode_id}";
    if ($extra_field_component = $display->getComponent($extra_field_name)) {
      $extra_fields_enabled[$extra_field_name] = [
        'component' => $extra_field_component,
        'view_mode' => $help_view_mode_id,
      ];
    }
  }

  // Exit if none are enabled.
  if (empty($extra_fields_enabled)) {
    return [];
  }

  // Find all helps published for this display.
  $helps = ParagraphsTypeHelp::loadPublishedByHostDisplay($display);

  // Exit if no helps exist.
  if (empty($helps)) {
    return [];
  }

  $build = [];
  $entity_repository = \Drupal::service('entity.repository');
  $display_type = $display instanceof EntityViewDisplay ? 'view' : 'form';
  $display_mode = $display->getMode();

  // Render each field.
  $view_builder = \Drupal::entityTypeManager()->getViewBuilder('paragraphs_type_help');
  foreach ($extra_fields_enabled as $extra_field_name => $extra_field_data) {
    $help_builds = [];

    // Render each help in configured view mode.
    foreach ($helps as $help_source) {
      // Get help in the current language.
      $help = $entity_repository->getTranslationFromContext($help_source);

      // Render entity in the current language.
      $help_build = $view_builder->view($help, $extra_field_data['view_mode']);

      // Set paragraph view mode for templates.
      if ($display_mode && $display_type) {
        $help_build['#paragraph_' . $display_type . '_mode'] = $display_mode;
      }

      // Add to all builds with the help weight.
      $help_builds[$help->id()] = [
        '#weight' => $help->getWeight(),
        'entity' => $help_build,
        '#access' => $help->access('view'),
      ];
    }

    // Add field to overall build.
    if (!empty($help_builds)) {
      $build[$extra_field_name] = [
        '#type' => 'container',
        '#weight' => isset($extra_field_data['component']['weight']) ? $extra_field_data['component']['weight'] : 0,
        'content' => $help_builds,
      ];
    }
  }

  return $build;
}

/**
 * Implements hook_paragraph_view().
 */
function paragraphs_type_help_paragraph_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Add help extra fields.
  if ($help_builds = paragraphs_type_help_build_by_host_bundle($display)) {
    $build += $help_builds;
  }
}

/**
 * Common widget alter for any paragraphs widget.
 *
 * @see hook_field_widget_WIDGET_TYPE_form_alter()
 */
function _paragraphs_type_help_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  // If the field element has a paragraph sub form ...
  if (isset($element['subform'])) {
    $field_definition = $context['items']->getFieldDefinition();
    $field_name = $field_definition->getName();
    $widget_class = get_class($context['widget']);
    $widget_state = $widget_class::getWidgetState($element['#field_parents'], $field_name, $form_state);

    // Exit if there is no paragraphs data for this delta.
    if (empty($widget_state['paragraphs'][$context['delta']])) {
      return;
    }

    $item_state = $widget_state['paragraphs'][$context['delta']];

    // Exit if item state does not have enough information.
    if (empty($item_state['mode']) || $item_state['mode'] !== 'edit' ||
        empty($item_state['entity']) || empty($item_state['display'])) {
      return;
    }

    if ($help_builds = paragraphs_type_help_build_by_host_bundle($item_state['display'])) {
      $element['subform'] += $help_builds;
    }
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Paragraphs EXPERIMENTAL Widget.
 */
function paragraphs_type_help_field_widget_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  _paragraphs_type_help_field_widget_paragraphs_form_alter($element, $form_state, $context);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 *
 * Paragraphs Classic Widget.
 */
function paragraphs_type_help_field_widget_entity_reference_paragraphs_form_alter(&$element, FormStateInterface $form_state, $context) {
  _paragraphs_type_help_field_widget_paragraphs_form_alter($element, $form_state, $context);
}

/**
 * Returns all paragraph form mode options.
 *
 * This is used as the allowed_values_function for the paragraphs_type_help
 * entity's field host_form_modes.
 *
 * @return array
 *   An array of view modes as returned by
 *   \Drupal\core\Entity\EntityDisplayRepositoryInterface::getFormModeOptions().
 */
function paragraphs_type_help_paragraph_form_mode_options() {
  return \Drupal::service('entity_display.repository')->getFormModeOptions('paragraph');
}

/**
 * Returns all paragraph view mode options.
 *
 * This is used as the allowed_values_function for the paragraphs_type_help
 * entity's field host_view_modes.
 *
 * @return array
 *   An array of view modes as returned by
 *   \Drupal\core\Entity\EntityDisplayRepositoryInterface::getViewModeOptions().
 */
function paragraphs_type_help_paragraph_view_mode_options() {
  return \Drupal::service('entity_display.repository')->getViewModeOptions('paragraph');
}

/**
 * Returns all paragraph type options for a select list callback.
 *
 * This is used in the views filter handler for the host_bundle.
 *
 * @return array
 *   An array with keys of paragraph bundle ids and labels as values.
 */
function paragraphs_type_help_paragraph_type_options() {
  $options = [];
  $bundles = \Drupal::service('entity_type.bundle.info')->getBundleInfo('paragraph');
  foreach ($bundles as $bundle_id => $bundle_info) {
    $options[$bundle_id] = isset($bundle_info['label']) ? $bundle_info['label'] : $bundle_id;
  }

  return $options;
}
